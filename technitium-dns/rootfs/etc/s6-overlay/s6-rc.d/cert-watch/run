#!/command/with-contenv bashio
# shellcheck shell=bash
# ==============================================================================
# Watch certificates for changes and regenerate PKCS #12 if needed
# ==============================================================================

# Add strict error handling
set -euo pipefail

# Configure error handling
trap 'handle_error $? $LINENO $BASH_LINENO "$BASH_COMMAND" $(printf "::%s" ${FUNCNAME[@]:-})' ERR

handle_error() {
    local exit_code=$1
    local line_no=$2
    local bash_lineno=$3
    local last_command=$4
    local func_trace=$5

    bashio::log.error "Error in bash at line ${bash_lineno}"
    bashio::log.error "Error in init-dns-server at line ${line_no}"
    bashio::log.error "Command '${last_command}' exited with status ${exit_code}"
    bashio::log.error "Function trace: ${func_trace}"

    exit "${exit_code}"
}

LOG_LEVEL=$(bashio::config 'log_level' 'info')
bashio::log.level "$LOG_LEVEL"

bashio::log.debug "================================================="
bashio::log.debug "  Starting Certificate Tool"
bashio::log.debug "================================================="

# Check if manual certificate handling is enabled
if bashio::config.true 'manualCertHandling'; then
    bashio::log.debug "Manual certificate handling enabled - disabling certificate watch"
    exec sleep infinity
fi

# Source utilities and perform initial setup
if ! source "/etc/s6-overlay/scripts/cert_utils.sh"; then
    bashio::exit.nok "Failed to source certificate utilities"
fi

# Function to get unique directories to watch
get_watch_dirs() {
    echo "$(dirname "$CERT_FILE")" "$(dirname "$KEY_FILE")" "$(dirname "$PKCS12_FILE")" | tr ' ' '\n' | sort -u
}

# Initial certificate setup
handle_cert_update

# Add health check
check_inotify() {
    if ! command -v inotifywait >/dev/null 2>&1; then
        bashio::log.debug "inotifywait not found"
        return 1
    fi
    return 0
}

# Add debouncing for file changes
readonly DEBOUNCE_SECONDS=10
handle_cert_changes() {
    local last_run=0
    local now

    now=$(date +%s)
    if ((now - last_run < DEBOUNCE_SECONDS)); then
        return 0
    fi

    handle_cert_update
    last_run=$now
}

# Create all required directories
for dir in $(get_watch_dirs); do
    mkdir -p "$dir"
done

# Watch for changes
sleep 10
bashio::log.debug "Starting certificate watch..."
while true; do
    # Watch parent directories for any changes
    if ! inotifywait -e close_write,move,create,delete "$(get_watch_dirs)" >/dev/null 2>&1; then
        bashio::log.debug "inotifywait failed, retrying in 10 seconds..."
        sleep 10
        continue
    fi

    bashio::log.debug "Detected certificate change..."
    handle_cert_changes
done
