#!/command/with-contenv bashio
# shellcheck shell=bash
# shellcheck disable=SC1091
# shellcheck disable=SC2154
# ==============================================================================
# Watch certificates for changes and regenerate PKCS #12 if needed
# ==============================================================================

# Wait for DNS server to fully initialize
sleep 60

bashio::log.debug "================================================="
bashio::log.debug "  Starting Certificate Tool"
bashio::log.debug "================================================="

# -----------------------------------------------------------------------------
# Configuration Check
# -----------------------------------------------------------------------------
# Skip certificate monitoring if user prefers manual handling
if bashio::config.true 'manualCertHandling'; then
    bashio::log.debug "Manual certificate handling enabled - disabling certificate watch"
    exec sleep infinity
fi

# -----------------------------------------------------------------------------
# Source Dependencies
# -----------------------------------------------------------------------------
# Source utilities and perform initial setup
# shellcheck source=/etc/s6-overlay/scripts/cert_utils.sh
if ! source "/etc/s6-overlay/scripts/cert_utils.sh"; then
    bashio::exit.nok "Failed to source certificate utilities"
fi

# shellcheck source=/etc/s6-overlay/scripts/helper_utils.sh
if ! source "/etc/s6-overlay/scripts/helper_utils.sh"; then
    bashio::exit.nok "Failed to source helper utilities"
fi

# -----------------------------------------------------------------------------
# Helper Functions
# -----------------------------------------------------------------------------
# Return a list of unique directories that need to be monitored
get_watch_dirs() {
    # Get certificate file directories
    local cert_dir key_dir pkcs12_dir

    # Extract directories separately to avoid masking return values
    cert_dir=$(dirname "${CERT_FILE}" || true)
    key_dir=$(dirname "${KEY_FILE}" || true)
    pkcs12_dir=$(dirname "${PKCS12_FILE}" || true)

    # Combine and deduplicate the directories
    echo "${cert_dir}" "${key_dir}" "${pkcs12_dir}" | tr ' ' '\n' | sort -u
}

# Check for required inotify utility
check_inotify() {
    if ! command -v inotifywait >/dev/null 2>&1; then
        bashio::log.warning "inotifywait not found - certificate auto-updates may not work"
        return 1
    fi
    return 0
}

# -----------------------------------------------------------------------------
# Debounce Handling
# -----------------------------------------------------------------------------
# Track last update time across function calls
LAST_UPDATE_TIME=$(date +%s)
readonly DEBOUNCE_SECONDS=10

handle_cert_changes() {
    # Get current timestamp
    local now
    now=$(date +%s)

    # Skip if we've updated recently
    if ((now - LAST_UPDATE_TIME < DEBOUNCE_SECONDS)); then
        bashio::log.debug "Skipping update (within debounce period)"
        return 0
    fi

    # Process certificate updates
    bashio::log.debug "Updating certificates..."
    handle_cert_update
    LAST_UPDATE_TIME=$(date +%s)
}

# -----------------------------------------------------------------------------
# Initial Setup
# -----------------------------------------------------------------------------
# Create all required directories to ensure they exist for monitoring
dirs_to_watch=()
while read -r dir; do
    # Skip empty lines
    [[ -n "$dir" ]] || continue

    mkdir -p "${dir}"
    dirs_to_watch+=("${dir}")
done < <(get_watch_dirs || true)

# -----------------------------------------------------------------------------
# Certificate Monitoring Loop
# -----------------------------------------------------------------------------
# Start continuous monitoring for certificate changes
bashio::log.debug "Starting certificate watch service..."

# Simple health check file to detect restarts
touch "/tmp/.cert_watch_healthy"
trap 'rm -f /tmp/.cert_watch_healthy' EXIT

# Main monitoring loop
while true; do
    # Check for proper inotify functionality
    if ! check_inotify; then
        bashio::log.warning "inotify check failed, falling back to periodic checks"
        sleep 300 # Check every 5 minutes as a fallback
        handle_cert_changes
        continue
    fi

    # Watch parent directories for any changes to certificate files
    # Using array directly to avoid potential issues with reading into array
    bashio::log.debug "Watching directories: ${dirs_to_watch[*]}"
    if ! inotifywait -e close_write,move,create,delete "${dirs_to_watch[@]}" >/dev/null 2>&1; then
        bashio::log.debug "inotifywait failed, retrying in 30 seconds..."
        sleep 300
        continue
    fi

    # Handle detected changes
    bashio::log.debug "Detected certificate change, processing..."
    handle_cert_changes

    # Prevent too rapid looping
    sleep 1
done
