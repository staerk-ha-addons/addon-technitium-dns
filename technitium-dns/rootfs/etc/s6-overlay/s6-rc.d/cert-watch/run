#!/command/with-contenv bashio
# shellcheck shell=bash
# shellcheck disable=SC1091,SC2154
# ==============================================================================
# Watch certificates for changes and regenerate PKCS #12 if needed
# ==============================================================================

bashio::log.level 'debug'

# Wait for DNS server to fully initialize
sleep 60

bashio::log.debug "================================================="
bashio::log.debug "  Starting Certificate Tool"
bashio::log.debug "================================================="

# -----------------------------------------------------------------------------
# Configuration Check
# -----------------------------------------------------------------------------
# Skip certificate monitoring if user prefers manual handling
if bashio::config.true 'manualCertHandling'; then
    bashio::log.debug "Manual certificate handling enabled - disabling certificate watch"
    exec sleep infinity
fi

# -----------------------------------------------------------------------------
# Source Dependencies
# -----------------------------------------------------------------------------
# Source utilities and perform initial setup
# shellcheck source=/etc/s6-overlay/scripts/cert_utils.sh
if ! source "/etc/s6-overlay/scripts/cert_utils.sh"; then
    bashio::exit.nok "Failed to source certificate utilities"
fi

# -----------------------------------------------------------------------------
# Helper Functions
# -----------------------------------------------------------------------------
# Check for required inotify utility
check_inotify() {
    if ! command -v inotifywait >/dev/null 2>&1; then
        bashio::log.warning "inotifywait not found - certificate auto-updates may not work"
        return 1
    fi
    return 0
}

# -----------------------------------------------------------------------------
# Debounce Handling
# -----------------------------------------------------------------------------
# Track last update time across function calls
LAST_UPDATE_TIME=$(date +%s)
readonly DEBOUNCE_SECONDS=10

handle_cert_changes() {
    # Get current timestamp
    local now
    now=$(date +%s)

    # Skip if we've updated recently
    if ((now - LAST_UPDATE_TIME < DEBOUNCE_SECONDS)); then
        bashio::log.debug "Skipping update (within debounce period)"
        return 0
    fi

    # Process certificate updates
    bashio::log.debug "Updating certificates..."
    handle_cert_update
    LAST_UPDATE_TIME=$(date +%s)
}

# -----------------------------------------------------------------------------
# Certificate Monitoring Loop
# -----------------------------------------------------------------------------
# Start continuous monitoring for certificate changes
bashio::log.debug "Starting certificate watch service..."

# Simple health check file to detect restarts
touch "/tmp/.cert_watch_healthy"
trap 'rm -f /tmp/.cert_watch_healthy' EXIT

# Main monitoring loop
while true; do
    # Check for proper inotify functionality
    if ! check_inotify; then
        bashio::log.warning "inotify check failed, falling back to periodic checks"
        sleep 300 # Check every 5 minutes as a fallback
        handle_cert_changes
        continue
    fi

    # Watch parent directories for any changes to certificate files
    # Using array properly
    dirs_to_watch=("${ADDON_SSL_DIR}" "${ADDON_CONFIG_SSL_DIR}")
    if ! inotifywait -e close_write,move,create,delete "${dirs_to_watch[@]}" >/dev/null 2>&1; then
        bashio::log.debug "inotifywait failed, retrying in 30 seconds..."
        sleep 30
        continue
    fi

    # Handle detected changes
    bashio::log.debug "Detected certificate change, processing..."
    handle_cert_changes

    s6-rc -d change dns-server

    # Prevent too rapid looping
    sleep 1
done
