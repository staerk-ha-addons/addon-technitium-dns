#!/command/with-contenv bashio
# shellcheck shell=bash
# shellcheck disable=SC1091
# ==============================================================================
# Initialize environment variables for Technitium DNS Server addon
# This script runs as a oneshot service during s6-overlay initialization
# ==============================================================================

if [[ "${DEBUG:-false}" == "true" ]]; then
    bashio::log.level 'debug'
fi

bashio::log.debug "init-env: Setting up environment variables..."

# -----------------------------------------------------------------------------
# Source Dependencies
# -----------------------------------------------------------------------------
# Source helper utility functions for configuration and addon operations
# shellcheck source=/etc/s6-overlay/scripts/config_utils.sh
if ! source "/etc/s6-overlay/scripts/config_utils.sh"; then
    bashio::exit.nok "Failed to source configurations utilities"
fi

# -----------------------------------------------------------------------------
# Helper Functions
# -----------------------------------------------------------------------------
# Write environment variable without newline
write_env() {
    local name="$1"
    local value="$2"
    printf '%s' "${value}" >"/run/s6/container_environment/${name}"
}

# -----------------------------------------------------------------------------
# Configuration Variables
# -----------------------------------------------------------------------------
# Read configuration options from user config
ADDON_LOG_QUERIES=$(bashio::config 'logQueries' 'true')
ADDON_DNS_OVER_TLS=$(bashio::config 'enableDnsOverTls' 'true')
ADDON_DNS_OVER_HTTPS=$(bashio::config 'enableDnsOverHttps' 'true')
ADDON_DNS_OVER_HTTPS3=$(bashio::config 'enableDnsOverHttps3' 'true')
ADDON_DNS_OVER_QUIC=$(bashio::config 'enableDnsOverQuic' 'true')
forwarder_config=$(get_forwarder_config || true)
IFS='|' read -r ADDON_FORWARDER_SERVERS ADDON_FORWARDER_PROTOCOL <<<"${forwarder_config}"

# Use write_env instead of echo to avoid newlines
write_env "ADDON_FORWARDER_SERVERS" "${ADDON_FORWARDER_SERVERS}"
write_env "ADDON_FORWARDER_PROTOCOL" "${ADDON_FORWARDER_PROTOCOL}"
write_env "ADDON_LOG_QUERIES" "${ADDON_LOG_QUERIES}"
write_env "ADDON_DNS_OVER_TLS" "${ADDON_DNS_OVER_TLS}"
write_env "ADDON_DNS_OVER_HTTPS" "${ADDON_DNS_OVER_HTTPS}"
write_env "ADDON_DNS_OVER_HTTPS3" "${ADDON_DNS_OVER_HTTPS3}"
write_env "ADDON_DNS_OVER_QUIC" "${ADDON_DNS_OVER_QUIC}"

# -----------------------------------------------------------------------------
# Basic Configuration
# -----------------------------------------------------------------------------
# Get the hostname from config or use fallback
ADDON_DOMAIN=$(get_domain || echo "homeassistant.local")
write_env "ADDON_DOMAIN" "${ADDON_DOMAIN}"

# Set the addon directoies
ADDON_CONFIG_DIR="/config"
write_env "ADDON_CONFIG_DIR" "${ADDON_CONFIG_DIR}"
ADDON_CONFIG_SSL_DIR="${ADDON_CONFIG_DIR}/ssl"
write_env "ADDON_CONFIG_SSL_DIR" "${ADDON_CONFIG_SSL_DIR}"
mkdir -p "${ADDON_CONFIG_SSL_DIR}"

# -----------------------------------------------------------------------------
# API Access Configuration
# -----------------------------------------------------------------------------
# Define server API endpoint and authentication parameters
ADDON_API_SERVER="http://${HOSTNAME:-localhost}:5380"
ADDON_TOKEN_NAME="ha-addon-token"
ADDON_TOKEN_FILE="/config/.${ADDON_TOKEN_NAME}.enc"
ADDON_LOCK_FILE="/tmp/.${ADDON_TOKEN_NAME}.lock"

# Store API settings in container environment
write_env "ADDON_API_SERVER" "${ADDON_API_SERVER}"
write_env "ADDON_TOKEN_NAME" "${ADDON_TOKEN_NAME}"
write_env "ADDON_TOKEN_FILE" "${ADDON_TOKEN_FILE}"
write_env "ADDON_LOCK_FILE" "${ADDON_LOCK_FILE}"

# -----------------------------------------------------------------------------
# Certificate Path Configuration
# -----------------------------------------------------------------------------
# Get certificate and key file paths from config or default locations
cert_paths=$(get_cert_paths || true)
IFS='|' read -r ADDON_CERT_FILE ADDON_KEY_FILE <<<"${cert_paths}"

# Extract directory paths for certificates
cert_dir=$(dirname "${ADDON_CERT_FILE}" || true)
key_dir=$(dirname "${ADDON_KEY_FILE}" || true)

# Determine the best SSL directory to use
if [[ "${cert_dir}" != "${key_dir}" ]]; then
    # Log when certificate and key are in different locations
    bashio::log.debug "init-env: Certificate directory (${cert_dir}) and key directory (${key_dir}) do not match"

    # Pick the best directory based on existence checks
    if [[ -n "${cert_dir}" && -d "${cert_dir}" ]]; then
        # Use certificate directory if it exists
        ADDON_SSL_DIR="${cert_dir}"
    elif [[ -n "${key_dir}" && -d "${key_dir}" ]]; then
        # Fall back to key directory if cert directory doesn't exist
        ADDON_SSL_DIR="${key_dir}"
    else
        # Default to config ssl if neither directory exists
        ADDON_SSL_DIR="${ADDON_CONFIG_SSL_DIR}"
        bashio::log.warning "init-env: Using default SSL directory: ${ADDON_SSL_DIR}"
    fi
else
    # Certificate and key are in the same directory (or both undefined)
    ADDON_SSL_DIR="${cert_dir:-${ADDON_CONFIG_SSL_DIR}}" # Use cert_dir if defined, otherwise default to /ssl
fi

# -----------------------------------------------------------------------------
# PKCS12 Certificate Configuration
# -----------------------------------------------------------------------------
# Define PKCS12 file location and password for Technitium DNS
ADDON_PKCS12_FILE="${ADDON_CONFIG_SSL_DIR}/technitium.pfx"
ADDON_PKCS12_PASSWORD="TechnitiumDNS!SSL"

# Store certificate paths and settings in container environment
write_env "ADDON_SSL_DIR" "${ADDON_SSL_DIR}"
write_env "ADDON_CERT_FILE" "${ADDON_CERT_FILE}"
write_env "ADDON_KEY_FILE" "${ADDON_KEY_FILE}"
write_env "ADDON_PKCS12_FILE" "${ADDON_PKCS12_FILE}"
write_env "ADDON_PKCS12_PASSWORD" "${ADDON_PKCS12_PASSWORD}"

# Indicate successful environment setup
bashio::log.debug "init-env: Environment variables configured successfully"
bashio::log.debug "init-env: API Server: ${ADDON_API_SERVER}"
