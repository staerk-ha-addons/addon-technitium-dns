#!/command/with-contenv bashio
# shellcheck shell=bash
# shellcheck disable=SC1091
# ==============================================================================
# Home Assistant Add-on: Technitium DNS Server
# Manages the startup, readiness detection, and initialization of DNS server
# ==============================================================================

# Enable strict mode for better error handling and debugging
set -o nounset -o errexit -o pipefail

# -----------------------------------------------------------------------------
# Startup Banner
# -----------------------------------------------------------------------------
# Display a visual separator and startup message in debug logs
bashio::log.debug "dns-server: ================================================="
bashio::log.debug "dns-server:   Starting Technitium DNS Server"
bashio::log.debug "dns-server: ================================================="

# -----------------------------------------------------------------------------
# Environment Validation
# -----------------------------------------------------------------------------
# Ensure required dependencies and environment are ready before proceeding

# Change to the Technitium DNS application directory
cd "/opt/technitium/dns" || bashio::exit.nok "Could not change directory to Technitium DNS Server"

# Verify the .NET runtime is available as it's required by Technitium
if ! command -v /usr/share/dotnet/dotnet >/dev/null 2>&1; then
    bashio::exit.nok "Required dependency 'dotnet' not found!"
fi

# Disable .NET diagnostics
DOTNET_EnableDiagnostics=0

# -----------------------------------------------------------------------------
# DNS Server Readiness Detection
# -----------------------------------------------------------------------------
# Monitors the DNS server until it's fully operational or times out
#
# This function periodically checks if the DNS server is responding and
# validates that the response contains the expected signature text. It uses
# exponential backoff with strategic logging to avoid flooding logs.
#
# Returns:
#   0 - DNS server is ready and operational
#   1 - DNS server failed to become ready within the time limit
function monitor_dns_readiness() {
    # Configuration parameters for readiness detection
    local max_attempts=30
    local attempt=0
    local interval=2
    local dns_endpoint="http://${HOSTNAME}:5380"
    local response
    local signature_text="https://github.com/TechnitiumSoftware/DnsServer"

    bashio::log.info "dns-server: Starting DNS server readiness monitor"

    # Loop until server is ready or max attempts reached
    while [[ "${attempt}" -lt "${max_attempts}" ]]; do
        # Wait between checks to allow server to initialize
        sleep "${interval}"
        attempt=$((attempt + 1))

        # Log progress strategically to avoid log flooding
        # Only log at info level on first attempt or every 5th attempt
        if [[ "${attempt}" -eq 1 ]] || [[ $((attempt % 5)) -eq 0 ]]; then
            bashio::log.info "dns-server: Waiting for DNS server to be ready (attempt ${attempt}/${max_attempts})..."
        else
            bashio::log.debug "dns-server: Checking readiness (attempt ${attempt}/${max_attempts})"
        fi

        # Check if server responds to HTTP requests
        # Continue to next attempt if server doesn't respond
        if ! curl -s -f "${dns_endpoint}" -o /dev/null; then
            continue
        fi

        # Server is responding, verify it's the Technitium DNS server
        # by checking for a specific signature text in the response
        response="$(curl -s "${dns_endpoint}")"
        if ! grep -q -i "${signature_text}" <<< "${response}"; then
            bashio::log.debug "dns-server: Server responded but signature not found"
            continue
        fi

        # DNS server is up and verified
        bashio::log.info "dns-server: DNS server is ready and responding!"

        return 0
    done

    # We've exceeded the maximum number of attempts
    bashio::log.warning "dns-server: Timed out waiting for DNS server to be ready"
    return 1
}

# -----------------------------------------------------------------------------
# Initialization Script
# -----------------------------------------------------------------------------
# Executes the DNS server initialization script which configures settings
# including hostname, SSL certificates, and dns_forwarders.
#
# This function runs the initialization script in a subshell to isolate its
# environment and ensure any failures don't affect the main service.
function run_init_script() {
    bashio::log.info "dns-server: DNS server ready, running initialization script"

    # Execute the init script if it exists
    if [[ -f /etc/s6-overlay/scripts/init.sh ]]; then
        bashio::log.info "dns-server: Executing init script"

        # Run the init script in a subshell to isolate environment
        # This prevents any environment changes from affecting the main process
        (
            cd /etc/s6-overlay/scripts || return
            /command/with-contenv bashio /etc/s6-overlay/scripts/init.sh
        )

        # Capture the exit code from the subshell
        local exit_code=$?

        # Check if init script executed successfully
        if [[ "${exit_code}" -eq 0 ]]; then
            bashio::log.info "dns-server: Init script executed successfully"
        else
            bashio::log.warning "dns-server: Init script failed with error code ${exit_code}"
        fi
    else
        # No initialization script was found
        bashio::log.debug "dns-server: No init script found at /etc/s6-overlay/scripts/init.sh"
    fi
}

# -----------------------------------------------------------------------------
# Launch DNS Server
# -----------------------------------------------------------------------------
# Starts the DNS server and handles configuration based on mode setting

# Check if we're in manual configuration mode
# Manual mode skips the automatic configuration steps
if bashio::config.true 'manual_config'; then
    bashio::log.info "dns-server: Manual configuration mode detected, skipping readiness check"
else
    # In automatic mode, start the readiness monitor and run init when ready
    bashio::log.info "dns-server: Automatic configuration mode detected, starting readiness check"

    # Create a named pipe for communication between processes
    DNS_READY_PIPE="/tmp/dns_ready_pipe"
    mkfifo "${DNS_READY_PIPE}"

    # Start the monitoring process that will write to the pipe when complete
    # Use a separate script to avoid subshell limitations
    {
        # Call the monitor function
        monitor_dns_readiness

        # Write the monitor exit status to the pipe
        echo $? > "${DNS_READY_PIPE}"
    } &

    # Start the initialization process in background
    {
        # Read the monitor status from the pipe
        read -r monitor_status < "${DNS_READY_PIPE}"

        # Remove the named pipe
        rm -f "${DNS_READY_PIPE}"

        # Check the monitor status and initialize if successful
        if [[ "${monitor_status}" -eq 0 ]]; then
            # DNS is ready, run the init script to configure it
            run_init_script
        else
            # Monitor timed out or failed, skip initialization
            bashio::log.warning "dns-server: DNS server readiness check failed, skipping init script"
        fi
    } &
fi

# Start the DNS server with the .NET runtime
# Using exec replaces the current process with the DNS server
# This ensures proper signal handling and resource cleanup
exec /usr/share/dotnet/dotnet /opt/technitium/dns/DnsServerApp.dll /config
