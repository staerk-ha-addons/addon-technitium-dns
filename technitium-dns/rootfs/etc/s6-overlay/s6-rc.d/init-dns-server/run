#!/command/with-contenv bashio
# shellcheck shell=bash
# ==============================================================================
# Initializing Technitium DNS Server
# ==============================================================================

sleep 5

bashio::log.debug "================================================="
bashio::log.debug "  Initializing Technitium DNS Server"
bashio::log.debug "================================================="

if bashio::config.true 'manualConfig'; then
    bashio::log.debug "Manual configuration mode enabled - skipping automatic configuration"
    exit 0
fi

# Source utilities and perform initial setup
# Add initial validation
if ! source "/etc/s6-overlay/scripts/api_utils.sh"; then
    bashio::exit.nok "Failed to source API utilities"
fi

if ! source "/etc/s6-overlay/scripts/cert_utils.sh"; then
    bashio::exit.nok "Failed to source certificate utilities"
fi

# Validate config values
for config in logQueries enableDnsOverTls enableDnsOverHttps enableDnsOverQuic forwarders; do
    if ! bashio::config.exists "$config"; then
        bashio::exit.nok "Configuration option $config is required"
    fi
done

LOG_QUERIES=$(bashio::config 'logQueries' 'true')
DNS_OVER_TLS=$(bashio::config 'enableDnsOverTls' 'true')
DNS_OVER_HTTPS=$(bashio::config 'enableDnsOverHttps' 'true')
DNS_OVER_HTTPS3=$(bashio::config 'enableDnsOverHttps3' 'true')
DNS_OVER_QUIC=$(bashio::config 'enableDnsOverQuic' 'true')

# Function to map forwarder name to DNS server and protocol
get_forwarder_config() {
    local forwarder="$1"
    local dns_servers=""
    local protocol=""

    case "$forwarder" in
    "Cloudflare (DNS-over-UDP)")
        dns_servers="[\"1.1.1.1\",\"1.0.0.1\"]"
        protocol="Udp"
        ;;
    "Cloudflare (DNS-over-UDP IPv6)")
        dns_servers="[\"[2606:4700:4700::1111] ([2606:4700:4700::1111])\",\"[2606:4700:4700::1001] ([2606:4700:4700::1001])\"]"
        protocol="Udp"
        ;;
    "Cloudflare (DNS-over-TCP)")
        dns_servers="[\"1.1.1.1\",\"1.0.0.1\"]"
        protocol="Tcp"
        ;;
    "Cloudflare (DNS-over-TCP IPv6)")
        dns_servers="[\"[2606:4700:4700::1111]\",\"[2606:4700:4700::1001]\"]"
        protocol="Tcp"
        ;;
    "Cloudflare (DNS-over-TLS)")
        dns_servers="[\"cloudflare-dns.com (1.1.1.1:853)\",\"cloudflare-dns.com (1.0.0.1:853)\"]"
        protocol="Tls"
        ;;
    "Cloudflare (DNS-over-TLS IPv6)")
        dns_servers="[\"cloudflare-dns.com ([2606:4700:4700::1111]:853)\",\"cloudflare-dns.com ([2606:4700:4700::1001]:853)\"]"
        protocol="Tls"
        ;;
    "Cloudflare (DNS-over-HTTPS)")
        dns_servers="[\"https://cloudflare-dns.com/dns-query (1.1.1.1)\",\"https://cloudflare-dns.com/dns-query (1.0.0.1)\"]"
        protocol="Https"
        ;;
    "Cloudflare (DNS-over-HTTPS IPv6)")
        dns_servers="[\"https://cloudflare-dns.com/dns-query ([2606:4700:4700::1111])\",\"https://cloudflare-dns.com/dns-query ([2606:4700:4700::1001])\"]"
        protocol="Https"
        ;;
    "Cloudflare (Oblivious DNS-over-HTTPS)")
        dns_servers="[\"https://odoh.cloudflare-dns.com/dns-query (1.1.1.1)\",\"https://odoh.cloudflare-dns.com/dns-query (1.0.0.1)\"]"
        protocol="Https"
        ;;
    "Cloudflare (Oblivious DNS-over-HTTPS IPv6)")
        dns_servers="[\"https://odoh.cloudflare-dns.com/dns-query ([2606:4700:4700::1111])\",\"https://odoh.cloudflare-dns.com/dns-query ([2606:4700:4700::1001])\"]"
        protocol="Https"
        ;;
    "Cloudflare (DNS-over-QUIC)")
        dns_servers="[\"h3://cloudflare-dns.com (1.1.1.1)\",\"h3://cloudflare-dns.com (1.0.0.1)\"]"
        protocol="Quic"
        ;;
    "Cloudflare (DNS-over-QUIC IPv6)")
        dns_servers="[\"h3://cloudflare-dns.com ([2606:4700:4700::1111])\",\"h3://cloudflare-dns.com ([2606:4700:4700::1001])\"]"
        protocol="Quic"
        ;;
    "Cloudflare (DNS-over-TOR!)")
        dns_servers="[\"dns4torpnlfs2ifuz2s2yf3fc7rdmsbhm6rw75euj35pac6ap25zgqad.onion\"]"
        protocol="Tcp"
        ;;
    *)
        dns_servers="[\"1.1.1.1\",\"1.0.0.1\"]"
        protocol="Udp"
        ;;
    esac

    echo "$dns_servers|$protocol"
}

ADDON_HOSTNAME=$(get_hostname)

# Get forwarder settings from config
FORWARDER=$(bashio::config 'forwarders' 'Cloudflare (DNS-over-HTTPS)')
IFS='|' read -r DNS_SERVERS PROTOCOL <<<"$(get_forwarder_config "$FORWARDER")"

# See options here: https://github.com/TechnitiumSoftware/DnsServer/blob/master/APIDOCS.md#set-dns-settings
make_api_call "settings/get" "GET"
make_api_call "settings/set" "POST" "{
    \"dnsServerDomain\": \"${ADDON_HOSTNAME}\",
    \"loggingType\": \"FileAndConsole\",
    \"logQueries\": ${LOG_QUERIES},
    \"useLocalTime\": true,
    \"maxLogFileDays\": 7,
    \"maxStatFileDays\": 30,
    \"enableDnsOverTls\": ${DNS_OVER_TLS},
    \"enableDnsOverHttps\": ${DNS_OVER_HTTPS},
    \"enableDnsOverHttp3\": ${DNS_OVER_HTTPS3},
    \"enableDnsOverQuic\": ${DNS_OVER_QUIC},
    \"dnsTlsCertificatePath\": \"${PKCS12_FILE}\",
    \"dnsTlsCertificatePassword\": \"${PKCS12_PASSWORD}\",
    \"webServiceEnableTls\": true,
    \"webServiceEnableHttp3\": true,
    \"webServiceTlsCertificatePath\": \"${PKCS12_FILE}\",
    \"webServiceTlsCertificatePassword\": \"${PKCS12_PASSWORD}\",
    \"forwarders\": ${DNS_SERVERS},
    \"forwarderProtocol\": \"${PROTOCOL}\"
}"

manage_dns_app "Query Logs (Sqlite)"
