#!/command/with-contenv bashio
# shellcheck shell=bash
# shellcheck disable=SC1091
# shellcheck disable=SC2154
# ==============================================================================
# Initializing Technitium DNS Server
# ==============================================================================

# Allow DNS server to fully start before configuration
sleep 5

bashio::log.debug "================================================="
bashio::log.debug "  Initializing Technitium DNS Server"
bashio::log.debug "================================================="

# -----------------------------------------------------------------------------
# Manual Configuration Check
# -----------------------------------------------------------------------------
if bashio::config.true 'manualConfig'; then
    bashio::log.debug "Manual configuration mode enabled - skipping automatic configuration"
    exit 0
fi

# -----------------------------------------------------------------------------
# Source Dependencies
# -----------------------------------------------------------------------------
# Source utilities and perform initial setup
# shellcheck source=/etc/s6-overlay/scripts/api_utils.sh
if ! source "/etc/s6-overlay/scripts/api_utils.sh"; then
    bashio::exit.nok "Failed to source API utilities"
fi

# shellcheck source=/etc/s6-overlay/scripts/cert_utils.sh
if ! source "/etc/s6-overlay/scripts/cert_utils.sh"; then
    bashio::exit.nok "Failed to source certificate utilities"
fi

# shellcheck source=/etc/s6-overlay/scripts/helper_utils.sh
if ! source "/etc/s6-overlay/scripts/helper_utils.sh"; then
    bashio::exit.nok "Failed to source helper utilities"
fi

# -----------------------------------------------------------------------------
# Configuration Variables
# -----------------------------------------------------------------------------
# Read configuration options from user config
LOG_QUERIES=$(bashio::config 'logQueries' 'true')
DNS_OVER_TLS=$(bashio::config 'enableDnsOverTls' 'true')
DNS_OVER_HTTPS=$(bashio::config 'enableDnsOverHttps' 'true')
DNS_OVER_HTTPS3=$(bashio::config 'enableDnsOverHttps3' 'true')
DNS_OVER_QUIC=$(bashio::config 'enableDnsOverQuic' 'true')
FORWARDER=$(bashio::config 'forwarders' 'Cloudflare (DNS-over-HTTPS)')

# -----------------------------------------------------------------------------
# Configure DNS Server
# -----------------------------------------------------------------------------
# Perform initial certificate setup
handle_cert_update

# Get hostname from helper utility
ADDON_HOSTNAME=$(get_hostname)

# Get forwarder settings from config
forwarder_config=$(get_forwarder_config "${FORWARDER}" || true)
IFS='|' read -r DNS_SERVERS PROTOCOL <<<"${forwarder_config}"

# Validate we got required settings
if [[ -z "${DNS_SERVERS}" || -z "${PROTOCOL}" ]]; then
    bashio::log.debug "Failed to get valid forwarder configuration, using defaults"
    DNS_SERVERS="[\"1.1.1.1\",\"1.0.0.1\"]"
    PROTOCOL="Udp"
fi

# Apply configuration via API
# See options here: https://github.com/TechnitiumSoftware/DnsServer/blob/master/APIDOCS.md#set-dns-settings
bashio::log.debug "Applying DNS server configuration..."
make_api_call "settings/set" "POST" "{
    \"dnsServerDomain\": \"${ADDON_HOSTNAME}\",
    \"loggingType\": \"FileAndConsole\",
    \"logQueries\": ${LOG_QUERIES},
    \"useLocalTime\": true,
    \"maxLogFileDays\": 7,
    \"maxStatFileDays\": 30,
    \"enableDnsOverTls\": ${DNS_OVER_TLS},
    \"enableDnsOverHttps\": ${DNS_OVER_HTTPS},
    \"enableDnsOverHttp3\": ${DNS_OVER_HTTPS3},
    \"enableDnsOverQuic\": ${DNS_OVER_QUIC},
    \"dnsTlsCertificatePath\": \"${PKCS12_FILE}\",
    \"dnsTlsCertificatePassword\": \"${PKCS12_PASSWORD}\",
    \"webServiceEnableTls\": true,
    \"webServiceEnableHttp3\": true,
    \"webServiceTlsCertificatePath\": \"${PKCS12_FILE}\",
    \"webServiceTlsCertificatePassword\": \"${PKCS12_PASSWORD}\",
    \"forwarders\": ${DNS_SERVERS},
    \"forwarderProtocol\": \"${PROTOCOL}\"
}"

# -----------------------------------------------------------------------------
# Install Apps
# -----------------------------------------------------------------------------
# Install query logging app
bashio::log.debug "Installing/updating query logs app..."
manage_dns_app "Query Logs (Sqlite)"
